package lp2.lab07;

import org.junit.*;

public class TestaMedicos {
	private Medicos med1, med2, med3;
	private final int NAO_TEM_CARRO = 0, NAO_TEM_CASA = 0;
	private final double VALOR_PADRAO_CASA = 50000, VALOR_PADRAO_CARRO = 20000, VALOR_ACIMA_CASA = 800000, VALOR_ACIMA_CARRO = 200000;
	private final int PACIENTES1 = 2500, PACIENTES2 = 10000, PACIENTES3 = 8000;
	private final double GASTOS_CONGRESSOS1 = 7000, GASTOS_CONGRESSOS2 = 15000, GASTOS_CONGRESSOS3 = 43440;
	
	@Before
	public void criaObjetos () throws Exception {
		med1 = new Medicos("Adriano", "12345", PACIENTES1, GASTOS_CONGRESSOS1, NAO_TEM_CARRO, NAO_TEM_CASA);
		med2 = new Medicos("João", "91234", PACIENTES2, GASTOS_CONGRESSOS2, VALOR_ACIMA_CARRO, VALOR_ACIMA_CASA);
		med3 = new Medicos("Adriana", "81329", PACIENTES3, GASTOS_CONGRESSOS3, VALOR_PADRAO_CARRO, VALOR_PADRAO_CASA);
	}
	
	@Test
	public void testaConstrutor () {
		try {
			new Medicos("Fer", "123-4", -1, GASTOS_CONGRESSOS1, NAO_TEM_CARRO, NAO_TEM_CASA);
			Assert.fail("Deve lançar exceção porque os pacientes não podem ser negativos.");
		} catch (Exception e) {
			Assert.assertEquals("O valor dos gastos e pacientes não podem ser negativos.", e.getMessage());
		}
		
		try {
			new Medicos("Fer", "123-4", PACIENTES1, -1, NAO_TEM_CARRO, NAO_TEM_CASA);
			Assert.fail("Deve lançar exceção porque os pacientes não podem ser negativos.");
		} catch (Exception e) {
			Assert.assertEquals("O valor dos gastos e pacientes não podem ser negativos.", e.getMessage());
		}
		
		Assert.assertEquals("Adriano", med1.getNomeContribuinte());
		Assert.assertEquals("12345", med1.getNumeroContribuinte());
		Assert.assertEquals(NAO_TEM_CARRO, med1.getValorcarro(), 0.1);
		Assert.assertEquals(NAO_TEM_CASA, med1.getValorcasa(), 0.1);
		Assert.assertEquals(VALOR_ACIMA_CARRO, med2.getValorcarro(), 0.1);
		Assert.assertEquals(VALOR_ACIMA_CASA, med2.getValorcasa(), 0.1);
		Assert.assertEquals(VALOR_PADRAO_CARRO, med3.getValorcarro(), 0.1);
		Assert.assertEquals(VALOR_PADRAO_CASA, med3.getValorcasa(), 0.1);
		Assert.assertEquals(3, Medicos.getNumeroDeMedicos());
	}
	
	@Test
	public void testaCalculaTributacao () {
		System.out.println(med1.getTributacao());
		Assert.assertEquals(25000, med1.getTributacao(), 1);
		Assert.assertEquals(100000, med2.getTributacao(), 1);
		Assert.assertEquals(80000, med3.getTributacao(), 1);
	}
	
	@Test
	public void testaDescontoTributacao () {
		Assert.assertEquals(7000, med1.getDescontos(), 1);
		Assert.assertEquals(15000, med2.getDescontos(), 1);
		Assert.assertEquals(43440, med3.getDescontos(), 0.01);
	}
	
	@Test
	public void testaTributacaoTotal () {
		Assert.assertEquals(18000, med1.getTributacaoTotal(), 1);
		Assert.assertEquals(85000, med2.getTributacaoTotal(), 1);
		Assert.assertEquals(36560, med3.getTributacaoTotal(), 0.01);
	}
	
	@Test
	public void testaLimiarRiqueza () throws Exception {
		med1.limiarRiqueza();
		med2.limiarRiqueza();
		med3.limiarRiqueza();
		Assert.assertFalse(med1.getAcimaDaLimiar());
		Assert.assertTrue(med2.getAcimaDaLimiar());
		Assert.assertFalse(med3.getAcimaDaLimiar());
	}
	
	@Test
	public void testaToString () {
		Assert.assertEquals("Nome: Ricardo - Número de contribuinte: 123-4", cam1.toString());
		Assert.assertEquals("Nome: Pedro - Número de contribuinte: 123-5", cam2.toString());
		Assert.assertEquals("Nome: Ana Carolina - Número de contribuinte: 123-6", cam3.toString());
	}
	
	@Test
	public void testaEquals () throws Exception {
		Taxista taxi = new Taxista("Teste", "1234", 20, 20, NAO_TEM_CARRO, NAO_TEM_CASA);
		Assert.assertFalse(cam1.equals(taxi));
		Assert.assertFalse(cam1.equals(cam2));
		Assert.assertFalse(cam2.equals(cam3));
		cam1 = new Caminhoneiro("Pedro", "123-5", TONELADAS_ANO_ABAIXO_TAXA_FIXA, QUILOMETROS_PERCORRIDOS2, NAO_TEM_CARRO, NAO_TEM_CASA);;
		Assert.assertTrue(cam1.equals(cam2));
	} 
}
