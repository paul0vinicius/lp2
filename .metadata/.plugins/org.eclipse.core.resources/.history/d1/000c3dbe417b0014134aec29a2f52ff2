package lp2.lab08;

import org.junit.*;
import java.util.*;

public class TestaOpiniao {
	private final String COMENTARIO_VALIDO = "Achei o produto bastante eficiente, "
			+ "rápido, simples de ser manuseado e muito prático.";
	private final String COMENTARIO_INVALIDO = "Achei o produto bastante eficiente, "
			+ "rápido, simples de ser manuseado e muito prático. Mas, infelizmente, "
			+ "não pude adquirir um produto deste tipo devido ao seu preço. Por favor, "
			+ "diminuam o preço para que pessoas como eu também possam ser incluídas na "
			+ "lista de clientes felizes que possuem tal mercadoria. Abraços, Sonia.";
	private final String STRING_VAZIA = "";
	private Opiniao opiniao1, opiniao2;
	private final int NOTA_PADRAO = 1, NOTA_PADRAO2 = 2;
	private GregorianCalendar data, data2;
	
	@Before
	public void criaObjetos () throws Exception {
		opiniao1 = new Opiniao(NOTA_PADRAO, COMENTARIO_VALIDO);
		opiniao2 = new Opiniao(NOTA_PADRAO2, COMENTARIO_VALIDO);
		data = new GregorianCalendar();
		
		try {
		    Thread.sleep(2000);                 //1000 milliseconds is one second.
		} catch(InterruptedException ex) {
		    Thread.currentThread().interrupt();
		}
		
		data2 = new GregorianCalendar();
	}
	
	@Test
	public void testaConstrutor () {
		try {
			new Opiniao(-3, COMENTARIO_VALIDO);
			Assert.fail("Deve lançar exceção: Nota Inválida.");
		} catch (Exception e) {
			Assert.assertEquals("A nota deve estar entre -2 e 2.", e.getMessage());
		}
		
		try {
			new Opiniao(3, COMENTARIO_VALIDO);
			Assert.fail("Deve lançar exceção: Nota Inválida.");
		} catch (Exception e) {
			Assert.assertEquals("A nota deve estar entre -2 e 2.", e.getMessage());
		}
		
		try {
			new Opiniao(2, STRING_VAZIA);
			Assert.fail("Deve lançar exceção: Comentário inválido.");
		} catch (Exception e) {
			Assert.assertEquals("O comentário não pode ser uma string vazia ou nulo.", e.getMessage());
		}
		
		try {
			new Opiniao(2, null);
			Assert.fail("Deve lançar exceção: Comentário inválido.");
		} catch (Exception e) {
			Assert.assertEquals("O comentário não pode ser uma string vazia ou nulo.", e.getMessage());
		}
		
		try {
			new Opiniao(2, COMENTARIO_INVALIDO);
			Assert.fail("Deve lançar exceção: Comentário inválido.");
		} catch (Exception e) {
			Assert.assertEquals("Os caracteres não devem ultrapassar a quantidade de 140.", e.getMessage());
		}
		
		Assert.assertEquals(NOTA_PADRAO, opiniao1.getNotaProduto());
		Assert.assertEquals(COMENTARIO_VALIDO, opiniao1.getComentario());
		Assert.assertEquals(data.getTime(), opiniao1.getDataDoComentario());
	}
	
	@Test
	public void testaToString () {
		Assert.assertEquals("Nota: 1\nComentário: Achei o produto bastante eficiente, rápido, simples de ser manuseado e muito prático.", opiniao1.toString());
	}
	
	@Test
	public void testaEquals () {
		Assert.assertFalse(opiniao1 == opiniao2);
	}
}
