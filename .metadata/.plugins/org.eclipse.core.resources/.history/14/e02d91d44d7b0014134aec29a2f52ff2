package lp2.lab08;

import java.util.*;

public class EstrategiaSimples implements Estrategia  {
	private Opiniao comentarioMaisRelevantePositivo;
	private Opiniao comentarioMaisRelevanteNegativo;
	private String [] comentariosMaisRelevantes = new String[2];

	@Override
	public double calculaNotaNaMosca(List<Opiniao> opinioes) {
		if (opinioes.size() < 1) return 0;
		
		int soma = 0;
		for (Opiniao a: opinioes) {
			soma += a.getNotaProduto();
		}
		int media = soma / opinioes.size();
		return media;
	}

	@Override
	public String[] selecionaComentariosRelevantes(List<Opiniao> opinioes) {
		if (opinioes.size() < 1) {
			return null;
		}
		if (opinioes.size() == 1) {
			comentariosMaisRelevantes[0] = opinioes.get(0).getComentario();
			comentariosMaisRelevantes[1] = "";
			return comentariosMaisRelevantes;
		}
		int maior = opinioes.get(0).getNotaProduto();
		int menor = opinioes.get(0).getNotaProduto();
		comentarioMaisRelevantePositivo = opinioes.get(0);
		comentarioMaisRelevanteNegativo = opinioes.get(0);
		for (Opiniao a: opinioes) {
			if (a.getNotaProduto() > maior) {
				maior = a.getNotaProduto();
				comentarioMaisRelevantePositivo = a;
			}
			else if (a.getNotaProduto() == maior) {
				if (a.getDataDoComentario().before(comentarioMaisRelevantePositivo.getDataDoComentario())) {
					comentarioMaisRelevantePositivo = a;
				}
			}
			
			if (a.getNotaProduto() < menor) {
				menor = a.getNotaProduto();
				comentarioMaisRelevanteNegativo = a;
			}
			
			else if (a.getNotaProduto() == menor) {
				if (a.getDataDoComentario().before(comentarioMaisRelevanteNegativo.getDataDoComentario())) {
					comentarioMaisRelevanteNegativo = a;
				}
			}
		}
		comentariosMaisRelevantes[0] = comentarioMaisRelevantePositivo.getComentario();
		comentariosMaisRelevantes[1] = comentarioMaisRelevanteNegativo.getComentario();
		
		return comentariosMaisRelevantes;
	}	
}
