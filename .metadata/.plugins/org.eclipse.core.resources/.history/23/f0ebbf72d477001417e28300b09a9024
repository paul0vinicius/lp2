package lp2.lab07;

import java.util.ArrayList;
import java.util.List;

public class Caminhoneiro extends Rodoviarios {
	private static final int IMPOSTO_FIXO = 500;
	private double toneladasAno;
	private double somaRiquezasCam;
	private static double limiarRiquezaCam;
	private static List<Caminhoneiro> caminhoneiros = new ArrayList<Caminhoneiro>();
	
	public Caminhoneiro (String nomeContribuinte, String numeroContribuinte, double toneladasAno, double quilometros_percorridos, double valorCarro, double valorCasa) throws Exception {
		super(nomeContribuinte, numeroContribuinte, quilometros_percorridos, valorCarro, valorCasa);
		if (verificaSeENegativo(toneladasAno)) {
			throw new Exception("Os quilômetros percorridos e as toneladas não podem ser negativas.");
		}
		this.toneladasAno = toneladasAno;
		calculaTributacao();
		descontoTributacao();
		if (!verificaSeExiste(nomeContribuinte, numeroContribuinte)) {
			caminhoneiros.add(this);
			numeroDeContribuintes++;
		}
	}

	@Override
	protected void calculaTributacao() {
		if (toneladasAno <= 10) this.tributacao = IMPOSTO_FIXO;
		else this.tributacao = IMPOSTO_FIXO + (toneladasAno - 10) * 100;
	}
	
	@Override
	public boolean equals (Object obj) {
		if (!(obj instanceof Caminhoneiro)) {
			return false;
		}
		Caminhoneiro outroCaminhoneiro = (Caminhoneiro) obj;
		return outroCaminhoneiro.getNomeContribuinte().equals(getNomeContribuinte()) && outroCaminhoneiro.getNumeroContribuinte().equals(getNumeroContribuinte());
	}
	
	private boolean verificaSeENegativo (double numero) {
		if (numero < 0) {
			return true;
		}
		return false;
	}
	
	private boolean verificaSeExiste (String nome, String numero) {
		for (Caminhoneiro a: caminhoneiros) {
			if (a.getNomeContribuinte().equals(nome) || a.getNumeroContribuinte().equals(numero)) {
				return true;
			}
		}
		return false;
	}
	
	@Override
	public void limiarRiqueza () {
		atualizaLimiarRiqueza();
		if (sinaisRiqueza >= limiarRiquezaCam) {
			setRiquezaExcessiva(true);
		}
	}
	
	private void atualizaLimiarRiqueza () {
		somaRiquezasCam = 0.0;
		limiarRiquezaCam = 0.0;
		for (Caminhoneiro a: caminhoneiros) {
			somaRiquezasCam += (a.sinaisRiqueza);
		}
		limiarRiquezaCam = (somaRiquezasCam / caminhoneiros.size()) * 1.5;
	}
	
	public static int getNumeroDeCaminhoneiros () {
		return caminhoneiros.size();
	}
}
