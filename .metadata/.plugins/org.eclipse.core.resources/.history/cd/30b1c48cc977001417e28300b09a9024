package lp2.lab07;

import java.util.ArrayList;
import java.util.List;

public class Medicos extends Contribuinte {
	private int pacientes;
	private double gastosCongressos;
	private double somaRiquezasMed;
	private static double limiarRiquezaMed;
	private static List<Medicos> medicos = new ArrayList<Medicos>();
	
	public Medicos(String nomeContribuinte, String numeroContribuinte, int pacientes, double gastos, double valorCarro, double valorCasa) throws Exception {
		super(nomeContribuinte, numeroContribuinte, valorCarro, valorCasa);
		if (gastos < 0 || pacientes < 0) throw new Exception("O valor dos gastos e pacientes nÃ£o podem ser negativos.");
		this.pacientes = pacientes;
		this.gastosCongressos = gastos;
		if (!verificaSeExiste(nomeContribuinte, numeroContribuinte)) {
			medicos.add(this);
			numeroDeContribuintes++;
		}
	}

	@Override
	protected void calculaTributacao() {
		tributacao = pacientes * 10;
	}

	@Override
	protected void descontoTributacao() {
		descontos = gastosCongressos;
	}

	@Override
	public void limiarRiqueza () {
		atualizaLimiarRiqueza();
		if (sinaisRiqueza >= limiarRiquezaMed) {
			setRiquezaExcessiva(true);
		}
	}
	
	private boolean verificaSeExiste (String nome, String numero) {
		for (Medicos a: medicos) {
			if (a.getNomeContribuinte().equals(nome) || a.getNumeroContribuinte().equals(numero)) {
				return true;
			}
		}
		return false;
	}
	
	private void atualizaLimiarRiqueza () {
		somaRiquezasMed = 0.0;
		limiarRiquezaMed = 0.0;
		for (Medicos a: medicos) {
			somaRiquezasMed += (a.sinaisRiqueza);
		}
		limiarRiquezaMed = (somaRiquezasMed / medicos.size()) * 1.5;
	}
	
	public static int getNumeroDeMedicos () {
		return medicos.size();
	}
}
